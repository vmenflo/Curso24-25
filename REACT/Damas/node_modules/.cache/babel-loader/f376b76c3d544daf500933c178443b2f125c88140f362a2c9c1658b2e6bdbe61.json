{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\Proyectos\\\\Curso24-25\\\\REACT\\\\practicar\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Botonera(props) {\n  if (props.playable) {\n    let lista = [];\n    for (let i = 0; i < props.listaBotones.length; i++) {\n      for (let j = 0; j < props.listaBotones[i].length; j++) {\n        let colorFicha = props.listaBotones[i][j] ? \"secondary\" : \"success\";\n        lista.push(/*#__PURE__*/_jsxDEV(Button, {\n          color: colorFicha\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 20\n        }, this));\n      }\n      lista.push(/*#__PURE__*/_jsxDEV(\"br\", {}, `br-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 18\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: lista\n    }, void 0, false);\n  }\n  return null;\n}\n_c = Botonera;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listaBotones: [],\n      // Estado inicial vacío\n      playable: false\n    };\n  }\n  jugar() {\n    const filas = 8; // Número de filas del tablero\n    const columnas = 8; // Número de columnas del tablero\n    let copPlayable = !this.state.playable;\n\n    // Creamos el tablero dinámicamente\n    let copLista = [];\n    for (let i = 0; i < filas; i++) {\n      if (i < 5) {\n        copLista.push(Array(columnas).fill(true)); // Fichas \"libres\"\n      } else {\n        copLista.push(Array(columnas).fill(false)); // Fichas \"ocupadas\"\n      }\n    }\n\n    // Actualizamos el estado\n    this.setState({\n      listaBotones: copLista,\n      playable: copPlayable\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => this.jugar(),\n          children: \"Jugar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Botonera, {\n          listaBotones: this.state.listaBotones,\n          playable: this.state.playable\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"Botonera\");","map":{"version":3,"names":["React","Component","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","Botonera","props","playable","lista","i","listaBotones","length","j","colorFicha","push","color","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","App","constructor","state","jugar","filas","columnas","copPlayable","copLista","Array","fill","setState","render","className","onClick","$RefreshReg$"],"sources":["C:/xampp/htdocs/Proyectos/Curso24-25/REACT/practicar/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Botonera(props) {\r\n  if (props.playable) {\r\n    let lista = [];\r\n\r\n    for (let i = 0; i < props.listaBotones.length; i++) {\r\n      for (let j = 0; j < props.listaBotones[i].length; j++) {\r\n        let colorFicha = props.listaBotones[i][j] ? \"secondary\" : \"success\";\r\n        lista.push(<Button key={`${i}-${j}`} color={colorFicha} />);\r\n      }\r\n      lista.push(<br key={`br-${i}`} />);\r\n    }\r\n    return <>{lista}</>;\r\n  }\r\n  return null;\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listaBotones: [], // Estado inicial vacío\r\n      playable: false,\r\n    };\r\n  }\r\n\r\n  jugar() {\r\n    const filas = 8; // Número de filas del tablero\r\n    const columnas = 8; // Número de columnas del tablero\r\n    let copPlayable = !this.state.playable;\r\n\r\n    // Creamos el tablero dinámicamente\r\n    let copLista = [];\r\n    for (let i = 0; i < filas; i++) {\r\n      if (i < 5) {\r\n        copLista.push(Array(columnas).fill(true)); // Fichas \"libres\"\r\n      } else {\r\n        copLista.push(Array(columnas).fill(false)); // Fichas \"ocupadas\"\r\n      }\r\n    }\r\n\r\n    // Actualizamos el estado\r\n    this.setState({ listaBotones: copLista, playable: copPlayable });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Button onClick={() => this.jugar()}>Jugar</Button>\r\n          <br />\r\n          <Botonera listaBotones={this.state.listaBotones} playable={this.state.playable} />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}