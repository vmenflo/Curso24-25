{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\Proyectos\\\\Curso24-25\\\\REACT\\\\practicar\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Botonera(props) {\n  if (props.playable && props.listaBotones) {\n    let lista = [];\n\n    // Suponiendo que `props.listaBotones` es un arreglo bidimensional\n    for (let i = 0; i < props.listaBotones.length; i++) {\n      for (let j = 0; j < props.listaBotones[i].length; j++) {\n        // Corregimos la generación de botones\n        if (i % 2 === 0) {\n          lista.push(/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => props.clicar(i, j),\n            color: props.listaBotones[i][j].color\n          }, `btn-${i}-${j}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 22\n          }, this));\n          lista.push(/*#__PURE__*/_jsxDEV(Button, {\n            outline: true\n          }, `btn-out-${i}-${j}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 22\n          }, this));\n        } else {\n          lista.push(/*#__PURE__*/_jsxDEV(Button, {\n            outline: true\n          }, `btn-out-${i}-${j}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 22\n          }, this));\n          lista.push(/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => props.clicar(i, j),\n            color: props.listaBotones[i][j].color\n          }, `btn-${i}-${j}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 22\n          }, this));\n        }\n      }\n      lista.push(/*#__PURE__*/_jsxDEV(\"br\", {}, `br-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 18\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: lista\n    }, void 0, false);\n  }\n  return null;\n}\n_c = Botonera;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listaBotones: [],\n      // Inicializamos como array vacío\n      playable: false,\n      fila: -1,\n      columna: -1\n    };\n    this.clicar = this.clicar.bind(this); // Aseguramos que 'this' esté correctamente enlazado\n  }\n  clicar(i, j) {\n    let copiaLista = [...this.state.listaBotones]; // Copiar el estado de la lista para no modificar el original directamente\n    let cf = this.state.fila;\n    let cc = this.state.columna;\n\n    // Si ya hay una pieza seleccionada (cf, cc != -1)\n    if (cf !== -1) {\n      // Comprobamos si la casilla seleccionada está diagonalmente al lado de la pieza\n      // Movemos la pieza solo si la casilla destino está vacía\n      if (i === cf + 1 && (j === cc + 1 || j === cc - 1) ||\n      // Abajo a la derecha o a la izquierda\n      i === cf - 1 && (j === cc + 1 || j === cc - 1) // Arriba a la derecha o a la izquierda\n      ) {\n        // Verificamos si la casilla destino está libre\n        if (copiaLista[i][j].color === \"secondary\") {\n          // Mover la pieza\n          copiaLista[i][j].color = \"primary\"; // Nueva posición de la pieza\n          copiaLista[cf][cc].color = \"secondary\"; // Limpiar la antigua posición\n          cf = i; // Actualizamos la fila de la pieza seleccionada\n          cc = j; // Actualizamos la columna de la pieza seleccionada\n        }\n      }\n    } else {\n      // Si no hay pieza seleccionada, seleccionamos la pieza\n      if (copiaLista[i][j].color === \"primary\") {\n        copiaLista[i][j].color = \"primary\"; // Solo seleccionamos la pieza\n        cf = i;\n        cc = j;\n      }\n    }\n    this.setState({\n      listaBotones: copiaLista,\n      fila: cf,\n      columna: cc\n    });\n  }\n  jugar() {\n    let copPlayable = this.state.playable;\n    let copLista = [];\n    if (!copPlayable) {\n      // Creamos la lista de botones dinámicamente como un arreglo bidimensional\n      for (let i = 0; i < 8; i++) {\n        let fila = [];\n        for (let j = 0; j < 4; j++) {\n          if (i < 5) {\n            fila.push({\n              libre: true,\n              color: \"secondary\"\n            }); // Casillas vacías\n          } else {\n            fila.push({\n              libre: true,\n              color: \"success\"\n            }); // Casillas ocupadas por piezas\n          }\n        }\n        copLista.push(fila); // Agregamos la fila al arreglo principal\n      }\n      copPlayable = true;\n    } else {\n      // Si ya está en modo jugable, reseteamos\n      copLista = [];\n      copPlayable = false;\n    }\n    this.setState({\n      listaBotones: copLista,\n      playable: copPlayable\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => this.jugar(),\n          children: \"Jugar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Botonera, {\n          clicar: this.clicar,\n          listaBotones: this.state.listaBotones,\n          playable: this.state.playable\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"Botonera\");","map":{"version":3,"names":["React","Component","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","Botonera","props","playable","listaBotones","lista","i","length","j","push","onClick","clicar","color","fileName","_jsxFileName","lineNumber","columnNumber","outline","children","_c","App","constructor","state","fila","columna","bind","copiaLista","cf","cc","setState","jugar","copPlayable","copLista","libre","render","className","$RefreshReg$"],"sources":["C:/xampp/htdocs/Proyectos/Curso24-25/REACT/practicar/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Botonera(props) {\r\n  if (props.playable && props.listaBotones) {\r\n    let lista = [];\r\n\r\n    // Suponiendo que `props.listaBotones` es un arreglo bidimensional\r\n    for (let i = 0; i < props.listaBotones.length; i++) {\r\n      for (let j = 0; j < props.listaBotones[i].length; j++) {\r\n        // Corregimos la generación de botones\r\n        if (i % 2 === 0) {\r\n          lista.push(<Button onClick={() => props.clicar(i, j)} color={props.listaBotones[i][j].color} key={`btn-${i}-${j}`} />);\r\n          lista.push(<Button outline key={`btn-out-${i}-${j}`} />);\r\n        } else {\r\n          lista.push(<Button outline key={`btn-out-${i}-${j}`} />);\r\n          lista.push(<Button onClick={() => props.clicar(i, j)} color={props.listaBotones[i][j].color} key={`btn-${i}-${j}`} />);\r\n        }\r\n      }\r\n      lista.push(<br key={`br-${i}`} />);\r\n    }\r\n    return <>{lista}</>;\r\n  }\r\n  return null;\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listaBotones: [], // Inicializamos como array vacío\r\n      playable: false,\r\n      fila: -1,\r\n      columna: -1,\r\n    };\r\n    this.clicar = this.clicar.bind(this); // Aseguramos que 'this' esté correctamente enlazado\r\n  }\r\n\r\n  clicar(i, j) {\r\n    let copiaLista = [...this.state.listaBotones]; // Copiar el estado de la lista para no modificar el original directamente\r\n    let cf = this.state.fila;\r\n    let cc = this.state.columna;\r\n\r\n    // Si ya hay una pieza seleccionada (cf, cc != -1)\r\n    if (cf !== -1) {\r\n      // Comprobamos si la casilla seleccionada está diagonalmente al lado de la pieza\r\n      // Movemos la pieza solo si la casilla destino está vacía\r\n      if (\r\n        (i === cf + 1 && (j === cc + 1 || j === cc - 1)) || // Abajo a la derecha o a la izquierda\r\n        (i === cf - 1 && (j === cc + 1 || j === cc - 1)) // Arriba a la derecha o a la izquierda\r\n      ) {\r\n        // Verificamos si la casilla destino está libre\r\n        if (copiaLista[i][j].color === \"secondary\") {\r\n          // Mover la pieza\r\n          copiaLista[i][j].color = \"primary\"; // Nueva posición de la pieza\r\n          copiaLista[cf][cc].color = \"secondary\"; // Limpiar la antigua posición\r\n          cf = i; // Actualizamos la fila de la pieza seleccionada\r\n          cc = j; // Actualizamos la columna de la pieza seleccionada\r\n        }\r\n      }\r\n    } else {\r\n      // Si no hay pieza seleccionada, seleccionamos la pieza\r\n      if (copiaLista[i][j].color === \"primary\") {\r\n        copiaLista[i][j].color = \"primary\"; // Solo seleccionamos la pieza\r\n        cf = i;\r\n        cc = j;\r\n      }\r\n    }\r\n\r\n    this.setState({ listaBotones: copiaLista, fila: cf, columna: cc });\r\n  }\r\n\r\n  jugar() {\r\n    let copPlayable = this.state.playable;\r\n    let copLista = [];\r\n\r\n    if (!copPlayable) {\r\n      // Creamos la lista de botones dinámicamente como un arreglo bidimensional\r\n      for (let i = 0; i < 8; i++) {\r\n        let fila = [];\r\n        for (let j = 0; j < 4; j++) {\r\n          if (i < 5) {\r\n            fila.push({ libre: true, color: \"secondary\" }); // Casillas vacías\r\n          } else {\r\n            fila.push({ libre: true, color: \"success\" }); // Casillas ocupadas por piezas\r\n          }\r\n        }\r\n        copLista.push(fila); // Agregamos la fila al arreglo principal\r\n      }\r\n      copPlayable = true;\r\n    } else {\r\n      // Si ya está en modo jugable, reseteamos\r\n      copLista = [];\r\n      copPlayable = false;\r\n    }\r\n\r\n    this.setState({ listaBotones: copLista, playable: copPlayable });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Button onClick={() => this.jugar()}>Jugar</Button>\r\n          <br />\r\n          <Botonera\r\n            clicar={this.clicar}\r\n            listaBotones={this.state.listaBotones}\r\n            playable={this.state.playable}\r\n          />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}